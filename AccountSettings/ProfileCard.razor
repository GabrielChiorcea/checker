@page "/user-profile"

@using global::Checker.Services
@using global::Checker.state
@using global::Checker.Models 
@inject FetchService FetchService
@using System.IO
@using Microsoft.AspNetCore.Components.Forms
@inject ISessionStorageService sessionStorage

@code {
    private ProfileCardModel profileCardModel = new ProfileCardModel();

    private async Task Handler()
    {
            try{
                string tocken = await sessionStorage.GetItemAsync("authToken");
                var profilecard = await FetchService.SetContactDetail(profileCardModel, tocken);
            }catch(Exception e){
                Console.WriteLine(e);
            }
    }

    private async Task HandleImageChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        using (var stream = new MemoryStream())
        {
            await file.OpenReadStream().CopyToAsync(stream);
            profileCardModel.Image = stream.ToArray();
        }
    }
}

<EditForm Model="profileCardModel" OnValidSubmit="Handler" class="file-upload">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="container d-flex justify-content-between">
        <div class="left-section">
            <div class="px-4 py-5">
                <div class="row g-3">
                    <h4 class="mb-4 mt-0">Contact details</h4>
                    <div class="col-md-6">
                        <label for="homeAddress" class="form-label">Home Address</label>
                        <InputText id="homeAddress" type="text" class="form-control" @bind-Value="profileCardModel.HomeAddress" />
                    </div>
                    <div class="col-md-6">
                        <label for="country" class="form-label">Country</label>
                        <InputText id="country" type="text" class="form-control" @bind-Value="profileCardModel.Country" />
                    </div>
                    <div class="col-md-6">
                        <label for="county" class="form-label">County</label>
                        <InputText id="county" type="text" class="form-control" @bind-Value="profileCardModel.County" />
                    </div>
                    <div class="col-md-6">
                        <label for="occupation" class="form-label">Occupation</label>
                        <InputText id="occupation" type="text" class="form-control" @bind-Value="profileCardModel.Occupation" />
                    </div>
                </div>
            </div>
        </div>

        <div class="right-section text-center">
            <h4 class="mb-4 mt-0">Upload your profile photo</h4>
            <div class="square position-relative display-2 mb-3">
                @if (profileCardModel.Image != null)
                {
                    <img src="data:image/png;base64,@Convert.ToBase64String(profileCardModel.Image)" alt="Profile Image" class="profile-img" />
                }
                else
                {
                    <i class="fas fa-fw fa-user position-absolute top-50 start-50 translate-middle text-secondary"></i>
                }
            </div>
            <InputFile OnChange="HandleImageChange" type="file" id="customFile" name="file" hidden />
            <label class="btn btn-primary" for="customFile">Upload</label>
            <button type="button" class="btn btn-danger-soft mt-3">Remove</button>
            <p class="text-muted mt-3 mb-0"><span class="me-1">Note:</span>Minimum size 300px x 300px</p>
        </div>
    </div>
    <div class=" d-flex justify-content-center" >
    <button class="btn btn-primary mt-4" type="submit">Update contact details</button>
    </div>
    
</EditForm>



<style>

input[type="text"], input[type="file"], .btn {
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.2), rgba(0, 0, 0, 0.1));
    border: 1px solid rgb(20 2 2 / 50%);
    padding: 12px 20px;
    margin: 10px 0;
    border-radius: 12px;
    width: 100%;
    box-shadow: inset 0 1px 3px rgba(255, 255, 255, 0.2), 0 4px 10px rgba(0, 0, 0, 0.2); /* Umbre mai subtile */
    transition: all 0.3s ease;
    @* backdrop-filter: blur(8px); /* Efect de blur pentru eleganță */ *@
}

input[type="text"]:focus, input[type="file"]:focus {
    outline: none;
    box-shadow: inset 0 1px 5px rgba(255, 255, 255, 0.5), 0 6px 15px rgba(0, 0, 0, 0.3); /* Umbre mai intense la focus */
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.3), rgba(0, 0, 0, 0.15));
}

.btn {
    background-color: rgba(0, 123, 255, 0.7); /* Albastru semi-transparent */
    border-radius: 30px;
    padding: 12px 30px;
    color: #fff;
    cursor: pointer;
    transition: background-color 0.3s, box-shadow 0.3s;
    box-shadow: 0 6px 15px rgba(0, 123, 255, 0.3); /* Umbra albastră discretă */
}

.btn:hover {
    background-color: rgba(0, 123, 255, 0.9);
    box-shadow: 0 6px 20px rgba(0, 123, 255, 0.5); /* Umbra mai pronunțată la hover */
}


.container {
    background-color:  #d9e8fc ; 
    box-shadow: 0px 4px 15px rgba(0, 0, 0, 0.1);
    padding: 20px;
    border-radius: 10px;
    margin-top: 40px;
}

.left-section, .right-section {
    background-color: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
}

.left-section {
    width: 60%;
}

.right-section {
    width: 35%;
}

.btn-primary {
    background-color: #6c5ce7;
    border: none;
    width: 50%;
    padding: 10px 20px;
    border-radius: 50px;
    transition: background-color 0.3s ease;
}

.btn-primary:hover {
    background-color: #341f97;
    box-shadow: 0px 4px 12px rgba(52, 31, 151, 0.6);
}

.profile-img {
    width: 200px;
    height: 200px;
    border-radius: 50%;
    object-fit: cover;
    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.3);
}

.form-control {
    background-color: #f9fbff;
    border: 1px solid #ccc;
    transition: border-color 0.3s ease;
}

.form-control:focus {
    border-color: #6c5ce7;
    box-shadow: 0px 0px 8px rgba(108, 92, 231, 0.5);
}
</style>
