@page "/admin"

@using Checker.Pages.Message
@using global::Checker.state
@using global::Checker.Models 
@using global::Checker.Services
@using global::Checker.features
@using Fluxor
@inject FetchService FetchService
@inject NavigationManager NavigationManager
@inject ISessionStorageService sessionStorage
@inject IState<ModalState> ModalState
@inject IDispatcher Dispatcher


<div class="scrollable-container">
    <div class="container account-settings">
        <h2 class="mb-5 text-center">Account Settings</h2>

        <div class="row">
            <!-- Change Username -->
            <div class="col-md-6 mb-4">
                <div class="card shadow-sm">
                    <div class="card-header bg-primary text-white">
                        <h4>Change Username</h4>
                    </div>
                    <div class="card-body">
                        <form @onsubmit="HandelChangeUserName">
                            <div class="mb-3">
                                <label for="username" class="form-label">New Username</label>
                                <input type="text" class="form-control" id="username" @bind=userName placeholder="Enter new username">
                            </div>
                            <button class="btn btn-primary w-100">Update Username</button>
                        </form>
                    </div>
                </div>
            </div>

            <!-- Change Email -->
            <div class="col-md-6 mb-4">
                <div class="card shadow-sm">
                    <div class="card-header bg-primary text-white">
                        <h4>Change Email</h4>
                    </div>
                    <div class="card-body">
                        <form @onsubmit='HandelChangeNewEmail'>
                            <div class="mb-3">
                                <label for="email" class="form-label">New Email Address</label>
                                <input type="email" class="form-control" id="email" @bind='newEmail' placeholder="Enter new email">
                            </div>
                            <button class="btn btn-primary w-100">Update Email</button>
                        </form>
                    </div>
                </div>
            </div>

            <!-- Change Password -->
            <div class="col-md-6 mb-4">
                <div class="card shadow-sm">
                    <div class="card-header bg-warning text-white">
                        <h4>Change Password</h4>
                    </div>
                    <div class="card-body">
                        <form @onsubmit="HandleChangePassword">
                            <div class="mb-3">
                                <label for="currentPassword" class="form-label">Current Password</label>
                                <input type="password" class="form-control" id="currentPassword" @bind="currentPassword" placeholder="Enter current password">
                            </div>
                            <div class="mb-3">
                                <label for="newPassword" class="form-label">New Password</label>
                                <input type="password" class="form-control" id="newPassword" @bind="newPassword" placeholder="Enter new password">
                            </div>
                            <div class="mb-3">
                                <label for="confirmPassword" class="form-label">Confirm New Password</label>
                                <input type="password" class="form-control" id="confirmPassword" @bind="confirmPassword" placeholder="Confirm new password">
                            </div>
                            <button type="submit" class="btn btn-warning w-100">Change Password</button>
                        </form>
                    </div>
                </div>
            </div>

            <!-- Account Actions -->
            <div class="col-md-6 mb-4">
                <div class="card shadow-sm">
                    <div class="card-header bg-danger text-white">
                        <h4>Logout</h4>
                    </div>
                    <div class="card-body">
                        <div>
                            <button type="submit" class="btn btn-danger w-100 mb-3" @onclick="ShowConfirmDelete">Delete Account</button>
                            <button type="button" class="btn btn-secondary w-100" @onclick="DeleteToken">Logout</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<form class="modal" tabindex="-1" @onsubmit="HandleSubmit"  
style="@(showConfirmDelete ? "display:block" : "display:none")">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Delete account</h5>
        <span class="close" @onclick="HideConfirmDelete">&times;</span>
      </div>
      <div class="modal-body">
        <p>Are you sure you want to delete your account? All data will be deleted.</p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" @onclick="HideConfirmDelete">Cancel</button>
        <button type="button" class="btn btn-danger" @onclick="DeleteAccount">Yes, Delete</button>
      </div>
    </div>
  </div>

</form>




@if(ModalState.Value.ShowModal)
{
    <Modal />
}


@code {
    private bool showConfirmDelete = false;
    private string currentPassword;
    private string newPassword;
    private string confirmPassword;
    private string userName;
    private string newEmail;

    private void ShowConfirmDelete()
    {
        showConfirmDelete = true;
    }

    private void HideConfirmDelete()
    {
        showConfirmDelete = false;
    }

    private async Task HandleSubmit()
    {
        await DeleteAccount();
    }

    private async Task DeleteAccount()
    {
        try
        {
            string token = await sessionStorage.GetItemAsync("authToken");
            var response = await FetchService.DeleteAccountAsync($"{AppSettings.ApiBaseUrl}/deleteAccount", token);
            if (response.IsSuccessStatusCode)
            {
                sessionStorage.RemoveItemAsync("authToken");
                NavigationManager.NavigateTo("/");
            }
            
        }
        catch (Exception ex)
        {
            Dispatcher.Dispatch(new GetModalState(new ModalState("Error", "An error ocuured while procesing the data", true)));
        }
        finally
        {
            showConfirmDelete = false;
        }
    }

    private async Task HandleChangePassword()
    {
        if (newPassword != confirmPassword)
        {
            Dispatcher.Dispatch(new GetModalState(new ModalState("Error", "An error ocuured while procesing the data", true)));
            return;
        }

        try
        {
            string token = await sessionStorage.GetItemAsync("authToken");
            var changePasswordModel = new ChangePasswordModel
            {
                CurrentPassword = currentPassword,
                NewPassword = newPassword
            };
            var response = await FetchService.ChangePasswordAsync(changePasswordModel, token);
            if (response.message == "Password changed successfully")
            {
            Dispatcher.Dispatch(new GetModalState(new ModalState("Succes", "Data is changed with success", true)));
            }

        }
        catch (Exception ex)
        {
            Dispatcher.Dispatch(new GetModalState(new ModalState("Error", "An error ocuured while procesing the data", true)));

        } 
    }

    private async Task HandelChangeUserName()
    {
        UserNameChangeModel userNameChangeModel = new UserNameChangeModel
        {
            UserName = userName
        };

        try
        {
            string token = await sessionStorage.GetItemAsync("authToken");
            var response = await FetchService.ChangeUserNameAsync(userNameChangeModel, token);
            if (response.message == "Username changed successfully")
            {
            Dispatcher.Dispatch(new GetModalState(new ModalState("Succes", "Data is changed with success", true)));
            }

        }
        catch (Exception ex)
        {
                Dispatcher.Dispatch(new GetModalState(new ModalState("Error", "An error ocuured while procesing the data", true)));
        }
    }

    private async Task HandelChangeNewEmail()
    {
        EmailChangeModel emailChangeModel = new EmailChangeModel
        {
            NewEmail = newEmail
        };

        try
        {
            string token = await sessionStorage.GetItemAsync("authToken");
            var response = await FetchService.ChangeEmailAsync(emailChangeModel, token);
            if (response.message == "Email changed successfully")
            {
            Dispatcher.Dispatch(new GetModalState(new ModalState("Succes", "Data is changed with success", true)));
            }
 
        }
        catch (Exception ex)
        {
                Dispatcher.Dispatch(new GetModalState(new ModalState("Error", "An error ocuured while procesing the data", true)));
        }
    }

    private void DeleteToken()
    {
        sessionStorage.RemoveItemAsync("authToken");
        NavigationManager.NavigateTo("/");
        ReloadPage();
    }

    private void ReloadPage()
    {
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }
}




<style>


    .scrollable-container {
        overflow: auto;
        max-height: 100vh;
    }

    body {
        background: #f8f9fa;
        color: #212529;
        font-family: 'Roboto', sans-serif;
        min-height: 100vh;
        margin: 0;
        overflow: hidden;
    }

    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    .card {
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .card-header {
        border-top-left-radius: 10px;
        border-top-right-radius: 10px;
    }

    .card-body {
        padding: 20px;
    }

    .form-control {
        border-radius: 5px;
        border: 1px solid #ced4da;
        padding: 10px;
        width: 100%;
    }

    .btn {
        border-radius: 5px;
        padding: 10px 20px;
        transition: background-color 0.3s ease;
    }

    .btn-primary {
        background-color: #007bff;
        border: none;
        color: #fff;
    }

    .btn-primary:hover {
        background-color: #0056b3;
    }

    .btn-warning {
        background-color: #ffc107;
        border: none;
        color: #212529;
    }

    .btn-warning:hover {
        background-color: #e0a800;
    }

    .btn-danger {
        background-color: #dc3545;
        border: none;
        color: #fff;
    }

    .btn-danger:hover {
        background-color: #c82333;
    }

    .btn-secondary {
        background-color: #6c757d;
        border: none;
        color: #fff;
    }

    .btn-secondary:hover {
        background-color: #5a6268;
    }

    .modal {
        background-color: rgba(0, 0, 0, 0.4);
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

    .close:hover,
    .close:focus {
        color: black;
        text-decoration: none;
        cursor: pointer;
    }
</style>
