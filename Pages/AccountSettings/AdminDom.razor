@page "/admin"
@using Checker.Pages
@using Checker.Services
@using Checker.Pages.Message
@using global::Checker.state
@using global::Checker.Models 
@using global::Checker.features
@using Fluxor
@inject ISessionStorageService sessionStorage
@inject FetchService FetchService
@inject IJSRuntime JS
@inject NavigationManager NavigationManager  

<div class="scrollable-container">
    <div class="container account-settings">
        <h2 class="mb-5 text-center">Account Settings</h2>

        <div class="row">
            <!-- Change Username -->
            <div class="col-md-6 mb-4">
                <div class="card shadow">
                    <div class="card-header bg-primary text-white">
                        <h4>Change Username</h4>
                    </div>
                    <div class="card-body">
                        <form>
                            <div class="mb-3">
                                <label for="username" class="form-label">New Username</label>
                                <input type="text" class="form-control" id="username" placeholder="Enter new username">
                            </div>
                            <button class="btn btn-primary w-100">Update Username</button>
                        </form>
                    </div>
                </div>
            </div>

            <!-- Change Email -->
            <div class="col-md-6 mb-4">
                <div class="card shadow">
                    <div class="card-header bg-primary text-white">
                        <h4>Change Email</h4>
                    </div>
                    <div class="card-body">
                        <form>
                            <div class="mb-3">
                                <label for="email" class="form-label">New Email Address</label>
                                <input type="email" class="form-control" id="email" placeholder="Enter new email">
                            </div>
                            <button class="btn btn-primary w-100">Update Email</button>
                        </form>
                    </div>
                </div>
            </div>

            <div class="card-header bg-warning text-white">
                <h4>Change Password</h4>
            </div>
            <div class="card-body">
                <form>
                    <div class="mb-3">
                        <label for="currentPassword" class="form-label">Current Password</label>
                        <input type="password" class="form-control" id="currentPassword" placeholder="Enter current password">
                    </div>
                    <div class="mb-3">
                        <label for="newPassword" class="form-label">New Password</label>
                        <input type="password" class="form-control" id="newPassword" placeholder="Enter new password">
                    </div>
                    <div class="mb-3">
                        <label for="confirmPassword" class="form-label">Confirm New Password</label>
                        <input type="password" class="form-control" id="confirmPassword" placeholder="Confirm new password">
                    </div>
                    <button class="btn btn-warning w-100">Change Password</button>
                </form>
            </div>
        </div>

        <!-- Account Actions -->
        <div class="col-md-6 mb-4">
            <div class="card shadow">
                <div class="card-header bg-danger text-white">
                    <h4>Danger Zone</h4>
                </div>
                <div class="card-body">
                    <form @onsubmit="HandleSubmit">
                        <button type="submit" class="btn btn-danger w-100 mb-3">Delete Account</button>
                        <button type="button" class="btn btn-secondary w-100" @onclick="DeleteToken">Logout</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .scrollable-container {
        overflow: auto; /* Ensure the container can scroll */
        max-height: 100vh; /* Set a maximum height for the container */
    }

    body {
        background: radial-gradient(circle at center, #000 20%, #0d0d0d 100%);
        color: #fff;
        font-family: 'Roboto', sans-serif;
        min-height: 100vh;
        margin: 0;
        overflow: hidden;
    }

    /* Cer înstelat */
    body::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: url('https://www.transparenttextures.com/patterns/dark-matter.png');
        opacity: 0.2;
        z-index: -1;
    }

    /* Container general */
    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    /* Stil pentru secțiuni */
    .section {
        background-color: rgba(0, 0, 0, 0.8);
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 4px 15px rgba(0, 255, 255, 0.2);
    }

    /* Stiluri neon pentru etichete */
    .label {
        color: #0ff;
        font-size: 1.2em;
        text-shadow: 0 0 10px #00ffff, 0 0 20px #00ffff;
    }

    /* Inputurile cu stil neon */
    input[type="text"], input[type="email"], input[type="password"], .form-control {
        background: transparent;
        border: 1px solid #0ff;
        color: #fff;
        padding: 12px;
        border-radius: 10px;
        width: 100%;
        transition: 0.3s;
        box-shadow: 0 0 10px rgba(0, 255, 255, 0.5);
    }

    input[type="text"]:focus, input[type="email"]:focus, input[type="password"]:focus {
        outline: none;
        border-color: #ff00ff;
        box-shadow: 0 0 20px rgba(255, 0, 255, 0.7);
    }

    /* Butoane neon */
    button, .btn {
        background-color: #0ff;
        color: #000;
        border: none;
        padding: 10px 20px;
        border-radius: 50px;
        transition: 0.3s;
        box-shadow: 0 4px 10px rgba(0, 255, 255, 0.4);
        cursor: pointer;
    }

    button:hover, .btn:hover {
        background-color: #ff00ff;
        box-shadow: 0 4px 20px rgba(255, 0, 255, 0.6);
    }

    /* Stiluri pentru secțiuni speciale (logout, delete account) */
    .logout-section, .delete-section {
        background-color: rgba(255, 0, 0, 0.1);
        border: 1px solid rgba(255, 0, 0, 0.5);
        box-shadow: 0 0 15px rgba(255, 0, 0, 0.6);
    }

    /* Titluri cu stiluri neon */
    h2, h4 {
        color: #fff;
        text-shadow: 0 0 10px #00ffff, 0 0 20px #00ffff;
    }

    body::after {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: transparent url('https://www.transparenttextures.com/patterns/stardust.png');
        z-index: -2;
        animation: starTwinkle 2s infinite;
    }
</style>

@code {
    private async Task HandleSubmit(EventArgs e)
    {
        //e.PreventDefault();
        await DeleteAccount();
    }

    private async Task DeleteAccount()
    {
        string tocken = await sessionStorage.GetItemAsync("authToken");
        await FetchService.DeleteAccountAsync($"{AppSettings.ApiBaseUrl}/deleteAccount", tocken);
    }

    private void DeleteToken()
    {
        sessionStorage.RemoveItemAsync("authToken");
        NavigationManager.NavigateTo("/");
        ReloadPage();
    }

    private void ReloadPage()
    {
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }
}

