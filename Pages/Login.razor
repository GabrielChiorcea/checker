@page "/login"


@using global::Checker.state
@using global::Checker.Models 
@using global::Checker.Services
@using Fluxor
@inject IState<AuthenticationState> AuthenticationState
@inject IDispatcher Dispatcher
@inject FetchService FetchService
@inject IJSRuntime JS
@inject ISessionStorageService sessionStorage
@inject NavigationManager NavigationManager


@code{
    private SingUpModel singUpModel = new SingUpModel();
    private bool state = false;
    private string status = "";



    private void Reset(){
        state = false;
        status = "";
    }

    private async Task HandelSingUp(){    

        try{
            
           var message = await FetchService.SingUpAsyc(singUpModel);

            if(message.Code == "200"){
                await sessionStorage.SetItemAsync("authToken", message.Message);
                singUpModel = new SingUpModel();
                NavigationManager.NavigateTo("/");
                Dispatcher.Dispatch(new LoginAction());
            }else if ( message.Code == "202"){
                state = true;
                status = message.Message;
            }else{
                state = true;
                status = "We dont have a response from the server";
            };
        }
        catch (Exception ex){
            state = true;
            status =  ex.Message;
        }
    }


}  


    <div class="col-lg-6 offset-lg-3" >
            <h1>Intra in cont</h1>
        <div class="row justify-content-center">
            <div>
                <h6>If a problem occur a message will be send</h6>
                @if(state == true){
                    <div class="alert alert-danger" role="alert">
                        @status
                    </div>
                }else{
                    <div class="alert alert-primary" role="alert">
                        All good at now.
                    </div>
                    }
            </div>      
        <EditForm  Model="singUpModel" OnValidSubmit="HandelSingUp">
            <DataAnnotationsValidator />

            <div class="mb-3" >
                <label class="form-label" >Username:</label>
                <InputText class="form-control" @onfocus="Reset" @bind-Value="singUpModel.email" />
                <ValidationMessage For="() => singUpModel.email"/>
            </div>

            <div class="mb-3" >
                <label class="form-label" >Password:</label>
                <InputText class="form-control" @onfocus="Reset" @bind-Value="singUpModel.password" type="password" />
                <ValidationMessage For="() => singUpModel.password"/>
                
            </div>

            <button class="btn btn-primary" type="submit">Login</button>

        </EditForm>
    </div>
</div>

